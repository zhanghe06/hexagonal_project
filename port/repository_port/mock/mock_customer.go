// Code generated by MockGen. DO NOT EDIT.
// Source: ./customer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "hexagonal_project/infrastructure/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepositoryPort is a mock of CustomerRepositoryPort interface.
type MockCustomerRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryPortMockRecorder
}

// MockCustomerRepositoryPortMockRecorder is the mock recorder for MockCustomerRepositoryPort.
type MockCustomerRepositoryPortMockRecorder struct {
	mock *MockCustomerRepositoryPort
}

// NewMockCustomerRepositoryPort creates a new mock instance.
func NewMockCustomerRepositoryPort(ctrl *gomock.Controller) *MockCustomerRepositoryPort {
	mock := &MockCustomerRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepositoryPort) EXPECT() *MockCustomerRepositoryPortMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRepositoryPort) Create(ctx context.Context, data model.Customer) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRepositoryPortMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRepositoryPort)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockCustomerRepositoryPort) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerRepositoryPortMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerRepositoryPort)(nil).Delete), ctx, id)
}

// GetInfo mocks base method.
func (m *MockCustomerRepositoryPort) GetInfo(ctx context.Context, id uint64) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, id)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockCustomerRepositoryPortMockRecorder) GetInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockCustomerRepositoryPort)(nil).GetInfo), ctx, id)
}

// GetList mocks base method.
func (m *MockCustomerRepositoryPort) GetList(ctx context.Context, filter map[string]interface{}, args ...interface{}) (int64, []model.Customer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetList", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]model.Customer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockCustomerRepositoryPortMockRecorder) GetList(ctx, filter interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockCustomerRepositoryPort)(nil).GetList), varargs...)
}

// Update mocks base method.
func (m *MockCustomerRepositoryPort) Update(ctx context.Context, id uint64, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerRepositoryPortMockRecorder) Update(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerRepositoryPort)(nil).Update), ctx, id, data)
}
